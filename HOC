# HOC

HOCs (Higher-Order Components) are a pattern in React used to reuse component logic. HOCs are essentially functions that take a component as a parameter and return a new component.

### Implementation Strategy

1. First, an HOC is a regular function that takes a functional component.
   1. The parameter type is `ComponentType<T>`
2. It returns an anonymous arrow function that primarily implements additional logic and returns the received component.
   1. The parameter type is props:T
   2. Need to pass {...props} within the returned component.

### Basic Concept

HOCs are functions that take a component and return a new one. The new component can add additional logic and features based on the original component.

```typescript
import React, { ComponentType } from 'react';

function withExample<T>(WrappedComponent: ComponentType<T>) {
  return (props: T) => {
    // can add additional logic and features based on the original component.
    return <WrappedComponent {...props} />;
  };
}
```

### Common Usage

#### 1. Enhance component functions

HOCs can be used to enhance component functionality, such as adding logging, handling permissions, and managing state, among other things.

**Example: Adding logging**

```typescript
import React, { ComponentType, useEffect } from 'react';

function withLogging<T>(WrappedComponent: ComponentType<T>) {
  return (props: T) => {
    useEffect(() => {
      console.log('Component mounted');
      return () => {
        console.log('Component unmounted');
      };
    }, []);

    return <WrappedComponent {...props} />;
  };
}

interface Props {
  message: string;
}

const MyComponent: React.FC<Props> = ({ message }) => {
  return <div>{message}</div>;
};

const MyComponentWithLogging = withLogging(MyComponent);
```

#### 2. Injecting additional props

HOCs can enhance components by injecting additional props.

**示例：注入用户信息**

```typescript
import React, { ComponentType } from 'react';

interface User {
  name: string;
}

interface Props {
  user: User;
}

const withUser = <P extends object>(WrappedComponent: ComponentType<P & Props>) => {
  const user: User = { name: 'John Doe' };

  return (props: P) => {
    return <WrappedComponent {...props} user={user} />;
  };
};

const MyComponent: React.FC<Props> = ({ user }) => {
  return <div>Hello, {user.name}</div>;
};

const MyComponentWithUser = withUser(MyComponent);
```

#### 3. 状态管理

高阶组件可以用于管理组件的状态，将状态逻辑从组件中抽离出来。

**示例：计数器状态**

```typescript
import React, { ComponentType, useState } from 'react';

interface InjectedProps {
  count: number;
  increment: () => void;
}

const withCounter = <P extends object>(WrappedComponent: ComponentType<P & InjectedProps>) => {
  return (props: P) => {
    const [count, setCount] = useState(0);

    const increment = () => {
      setCount(count + 1);
    };

    return <WrappedComponent {...props} count={count} increment={increment} />;
  };
};

const MyComponent: React.FC<InjectedProps> = ({ count, increment }) => {
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
};

const MyComponentWithCounter = withCounter(MyComponent);
```

### 使用 TypeScript 定义 HOC

在使用 TypeScript 时，为了确保类型安全，需要使用泛型和类型推断来定义 HOC。

#### 类型推断和泛型

```typescript
import React, { ComponentType } from 'react';

function withExample<T>(WrappedComponent: ComponentType<T>) {
  return (props: T) => {
    // 添加额外的逻辑或状态
    return <WrappedComponent {...props} />;
  };
}

interface Props {
  message: string;
}

const MyComponent: React.FC<Props> = ({ message }) => {
  return <div>{message}</div>;
};

const MyComponentWithExample = withExample(MyComponent);
```

### 使用 HOC 时的注意事项

1. **静态方法丢失**：高阶组件会覆盖原组件的静态方法，可以通过 `hoist-non-react-statics` 库解决这个问题。
2. **Refs 传递**：HOC 会阻断原组件的 ref，可以使用 `React.forwardRef` 和 `React.Ref` 解决这个问题。
3. **性能问题**：使用过多的 HOC 可能会导致性能问题，需要谨慎使用。

### 小结

高阶组件是 React 中强大的工具，可以用于增强组件、注入额外的 props、管理状态等。结合 TypeScript 使用，可以提高代码的类型安全性和可维护性。通过掌握这些用法和注意事项，可以更好地在项目中应用高阶组件。

### 参考资料

- [React 官方文档 - 高阶组件](https://reactjs.org/docs/higher-order-components.html)
- [TypeScript 官方文档](https://www.typescriptlang.org/docs/)
- [hoist-non-react-statics](https://github.com/mridgway/hoist-non-react-statics)